{
	"nodes":[
		{"type":"text","text":"**Graph**\n[[intro_to_graphs]]","id":"987601c097d8ee9d","x":-60,"y":-60,"width":188,"height":80,"color":"3"},
		{"id":"2e06537e3f09cd49","x":-458,"y":216,"width":250,"height":60,"type":"text","text":"**[[bipartite_graph]]**\nYou can use graph coloring"},
		{"id":"8c51e8db1ef2dffe","x":57,"y":193,"width":250,"height":60,"type":"text","text":"**[[topological_sorting]]**\n"},
		{"type":"text","text":"You can use a dependencies array that basically tells how many dependencies current node has and the start with the one with 0 dependency and then iterate backward","id":"6c256b6173a76973","x":360,"y":253,"width":276,"height":83},
		{"id":"200e5a951ae6efc4","x":-295,"y":-359,"width":235,"height":110,"type":"text","text":"**Un-directed Graph**\nDon't visit the same node that you have visited before keep track that you are not going to parent again"},
		{"id":"d1d3f347fa27ebaf","x":-600,"y":-359,"width":238,"height":111,"type":"text","text":"**Directed Graph**\nKeep a stack for visited node in current branch along with a global visited"},
		{"id":"ab441ab8eb3db0d5","x":-458,"y":-160,"width":250,"height":78,"color":"1","type":"text","text":"**[[cycle_detection]]**\nDetect cycle in directed and undirected"},
		{"id":"8e1453816ee1e125","x":700,"y":-540,"width":269,"height":143,"type":"text","text":"**Prims Algo**\nYou start with a node keep it in mst if it is already not present and then keep all its unvisited nbr with edge weight in a pq"},
		{"id":"d254ad3b1f736ab8","x":352,"y":-340,"width":260,"height":108,"type":"text","text":"**[[minimum_spanning_tree]]**\nFind connected nodes for which sum of edge weights are min"},
		{"id":"a8d0a9debd40f393","x":-227,"y":-528,"width":250,"height":60,"type":"text","text":"[[all_paths_from_source_to_target]]\nkeep track of parent"},
		{"id":"52d95dcd57d9d106","x":57,"y":-528,"width":143,"height":60,"color":"1","type":"text","text":"[[min_jumps]]"},
		{"id":"dc02efcd14c23255","x":-22,"y":-388,"width":159,"height":59,"type":"text","text":"**Standard Que**"},
		{"id":"ab0766e15fa5aaab","x":-461,"y":-53,"width":256,"height":94,"type":"text","text":"**[[flood_fill]]**\nGo to all possible non visited. island type problems"},
		{"id":"30938f6dd28fe6b2","x":-458,"y":80,"width":108,"height":63,"type":"text","text":"**DSU**"},
		{"id":"4dbde4ce446cf73a","x":-481,"y":-528,"width":209,"height":50,"type":"text","text":"[[evaluate_divison]]\nCreate a graph "},
		{"id":"e41911819de17451","x":-790,"y":58,"width":251,"height":107,"color":"1","type":"text","text":"[[most_stones_removed_with_same_row_and_column]]\nMerge first on same row and then for same column or you can represent col another way and then merge for that "},
		{"id":"d354b04d32100dba","x":228,"y":-528,"width":238,"height":60,"color":"1","type":"text","text":"[[region_cut_by_slashes]]"},
		{"id":"af3f4eb1fb17600a","x":-790,"y":176,"width":251,"height":81,"type":"text","text":"[[satisfiability_of_equality_condition]]\nCreate a DSU for all equal and then check for non equal"},
		{"id":"065ee25c738d72e2","x":-800,"y":-131,"width":261,"height":71,"type":"text","text":"[[number_of_closed_island]]\nStart with 0 at boundary and mark all its neighbor"},
		{"type":"text","text":"**Kruskals Algo**\nFor this the graph is stored as edge weight. Sort that graph according to edge weight and then use DSU. If two nodes are already connected then skip else join them","id":"f7025f933e70acd4","x":700,"y":-375,"width":269,"height":143},
		{"id":"0c3fdce0c1a3b6e9","x":687,"y":-210,"width":282,"height":70,"type":"text","text":"[[num_operation_to_make_network_connected]]\nFind non useful wire from the current network and use it to connect the other ones"},
		{"id":"84c75d6a90cf089e","x":-380,"y":-620,"width":250,"height":60,"color":"1","type":"text","text":"[[city_with_smallest_nbr_at_threshold]]"},
		{"type":"text","text":"[[mother_vertex]]\nThe last place where you start dfs can be your mother vertex","id":"a9d91c5b85c3a367","x":-92,"y":-620,"width":231,"height":60,"color":"1"},
		{"id":"1c7749d3a43d9391","x":-790,"y":276,"width":245,"height":93,"color":"1","type":"text","text":"[[permutation_swaps]]\nFor a connected component you can get all permutations"},
		{"type":"text","text":"[[word_search_board]]\nGo to all possible nbrs from i,j and memoise i,j,idx","id":"3bd331f186d224fd","x":180,"y":-620,"width":250,"height":60},
		{"id":"8c07f6d844aa31fa","x":352,"y":-120,"width":228,"height":67,"type":"text","text":"**[[shortest_path_algos]]**\n"},
		{"id":"4cc5181dcc67ed56","x":360,"y":358,"width":276,"height":83,"type":"text","text":"You can traverse the node in dfs add the last node you visit in dequeue and push front when you come back."},
		{"id":"2f46cfbe2a82863c","x":290,"y":16,"width":250,"height":60,"type":"text","text":"[[useful_extra_edges]]\nGet dist from source to all and dest to all and then for each edge check change in dist"},
		{"id":"74d92c3dd3526ecc","x":562,"y":20,"width":250,"height":60,"type":"text","text":"**Others**"},
		{"type":"text","text":"**[[bfs-0-1]]**\nFor binary weighted graph","id":"bf0271a86d1cf1fe","x":415,"y":135,"width":250,"height":58},
		{"type":"text","text":"**[[multi_source_bfs]]**\nStart with multiple places","id":"a9352adb309e8414","x":719,"y":135,"width":250,"height":58},
		{"id":"f32689d786460d42","x":730,"y":244,"width":210,"height":50,"type":"text","text":"**[[shortest_bridge]]**"},
		{"id":"a30542c61726a2be","x":829,"y":-34,"width":254,"height":80,"type":"text","text":"[[cheapest_flights_with_k_stop]]\nThe dijkstra should have k as first element"},
		{"id":"4b4f005d498fb223","x":828,"y":-123,"width":183,"height":63,"type":"text","text":"[[word_ladder_ii]]\nShortest path with BFS"},
		{"id":"6f4e252777308b2d","x":-145,"y":335,"width":179,"height":63,"type":"text","text":"[[course_schedule]]"},
		{"id":"49d6c3056f28dc11","x":57,"y":337,"width":250,"height":60,"type":"text","text":"[[find_eventful_safe_states]]"},
		{"id":"4c7837871bff2d23","x":-455,"y":335,"width":250,"height":60,"color":"1","type":"text","text":"[[possible_bipartation]]\nCheck this to find out the error you make"},
		{"id":"9af11baab8b749e5","x":-726,"y":-20,"width":181,"height":50,"type":"text","text":"[[account_merge]]"},
		{"id":"9530a0867655db8f","x":362,"y":-457,"width":250,"height":60,"type":"text","text":"[[stepping_numbers]]\nFind all possible states from one"}
	],
	"edges":[
		{"id":"f3dfbb7378bb3c61","fromNode":"987601c097d8ee9d","fromSide":"left","toNode":"ab441ab8eb3db0d5","toSide":"right"},
		{"id":"8e468bc17de9d37d","fromNode":"ab441ab8eb3db0d5","fromSide":"top","toNode":"d1d3f347fa27ebaf","toSide":"bottom"},
		{"id":"18ebed93a105bbfc","fromNode":"ab441ab8eb3db0d5","fromSide":"top","toNode":"200e5a951ae6efc4","toSide":"bottom"},
		{"id":"c6b684d33495237a","fromNode":"987601c097d8ee9d","fromSide":"left","toNode":"2e06537e3f09cd49","toSide":"right"},
		{"id":"9c8080ca50479a88","fromNode":"987601c097d8ee9d","fromSide":"bottom","toNode":"8c51e8db1ef2dffe","toSide":"top"},
		{"id":"dab95d1dfcc0b535","fromNode":"8c51e8db1ef2dffe","fromSide":"right","toNode":"4cc5181dcc67ed56","toSide":"left"},
		{"id":"5e02a7e86d918ec0","fromNode":"8c51e8db1ef2dffe","fromSide":"right","toNode":"6c256b6173a76973","toSide":"left"},
		{"id":"da4361ea8a26ce66","fromNode":"987601c097d8ee9d","fromSide":"top","toNode":"d254ad3b1f736ab8","toSide":"bottom"},
		{"id":"d33f206ba7a02495","fromNode":"d254ad3b1f736ab8","fromSide":"right","toNode":"8e1453816ee1e125","toSide":"left"},
		{"id":"fce14da1f7c37c8e","fromNode":"d254ad3b1f736ab8","fromSide":"right","toNode":"f7025f933e70acd4","toSide":"left"},
		{"id":"7ccf53e47d16b404","fromNode":"987601c097d8ee9d","fromSide":"right","toNode":"8c07f6d844aa31fa","toSide":"left"},
		{"id":"42977003f2fc93f9","fromNode":"74d92c3dd3526ecc","fromSide":"bottom","toNode":"a9352adb309e8414","toSide":"top"},
		{"id":"46dc68f55a559232","fromNode":"74d92c3dd3526ecc","fromSide":"bottom","toNode":"bf0271a86d1cf1fe","toSide":"top"},
		{"id":"b57493735c52fb3b","fromNode":"987601c097d8ee9d","fromSide":"left","toNode":"ab0766e15fa5aaab","toSide":"right"},
		{"id":"7cd4e2cc903ce880","fromNode":"8c51e8db1ef2dffe","fromSide":"bottom","toNode":"6f4e252777308b2d","toSide":"top"},
		{"id":"718aa2fdf622fec2","fromNode":"987601c097d8ee9d","fromSide":"top","toNode":"dc02efcd14c23255","toSide":"bottom"},
		{"id":"f720b27c0d70b600","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"a8d0a9debd40f393","toSide":"bottom"},
		{"id":"92a4bff3f3725484","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"52d95dcd57d9d106","toSide":"bottom"},
		{"id":"4a7fe1101c826719","fromNode":"987601c097d8ee9d","fromSide":"left","toNode":"30938f6dd28fe6b2","toSide":"right"},
		{"id":"1ae7720106e2ccb2","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"4dbde4ce446cf73a","toSide":"bottom"},
		{"id":"bc3d26ba7cec3643","fromNode":"8c07f6d844aa31fa","fromSide":"right","toNode":"4b4f005d498fb223","toSide":"left"},
		{"id":"9af14ce087fa6e71","fromNode":"30938f6dd28fe6b2","fromSide":"left","toNode":"9af11baab8b749e5","toSide":"right"},
		{"id":"6c60abb2e73a5826","fromNode":"8c51e8db1ef2dffe","fromSide":"bottom","toNode":"49d6c3056f28dc11","toSide":"top"},
		{"id":"ae399c0a02e267d7","fromNode":"30938f6dd28fe6b2","fromSide":"left","toNode":"e41911819de17451","toSide":"right"},
		{"id":"8191bc72a17bb228","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"d354b04d32100dba","toSide":"bottom"},
		{"id":"258f8880e051e5c3","fromNode":"30938f6dd28fe6b2","fromSide":"left","toNode":"af3f4eb1fb17600a","toSide":"right"},
		{"id":"51233dc5389f777a","fromNode":"ab0766e15fa5aaab","fromSide":"left","toNode":"065ee25c738d72e2","toSide":"right"},
		{"id":"97eed0496ed66730","fromNode":"d254ad3b1f736ab8","fromSide":"right","toNode":"0c3fdce0c1a3b6e9","toSide":"left"},
		{"id":"2eed2e00258cf587","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"84c75d6a90cf089e","toSide":"bottom"},
		{"id":"46ce010f9abccc97","fromNode":"8c07f6d844aa31fa","fromSide":"right","toNode":"a30542c61726a2be","toSide":"left"},
		{"id":"b4c696f45469871a","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"a9d91c5b85c3a367","toSide":"bottom"},
		{"id":"4f6513b8c142ac96","fromNode":"30938f6dd28fe6b2","fromSide":"left","toNode":"1c7749d3a43d9391","toSide":"right"},
		{"id":"fa1fcab33840f1d5","fromNode":"dc02efcd14c23255","fromSide":"right","toNode":"3bd331f186d224fd","toSide":"bottom"},
		{"id":"3348b703d744d5ef","fromNode":"8c07f6d844aa31fa","fromSide":"bottom","toNode":"2f46cfbe2a82863c","toSide":"top"},
		{"id":"e45538c3f8a83b49","fromNode":"8c07f6d844aa31fa","fromSide":"bottom","toNode":"74d92c3dd3526ecc","toSide":"top"},
		{"id":"e1cbc4b0ab2e017e","fromNode":"a9352adb309e8414","fromSide":"bottom","toNode":"f32689d786460d42","toSide":"top"},
		{"id":"02957f0f6626a4a0","fromNode":"2e06537e3f09cd49","fromSide":"bottom","toNode":"4c7837871bff2d23","toSide":"top"},
		{"id":"1b709d5d320324ad","fromNode":"dc02efcd14c23255","fromSide":"top","toNode":"9530a0867655db8f","toSide":"bottom"}
	]
}