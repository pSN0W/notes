{
	"nodes":[
		{"type":"text","text":"**[[bubble_sort]]**\nPerform swap between adjacent out of order element. Max at end in one iter","id":"02c0797c71873c0d","x":-880,"y":-500,"width":304,"height":112},
		{"type":"text","text":"**[[selection_sort]]**\nSelect minimum from the unsorted port and keep it at the end of sorted part","id":"d1ebb51132a24db0","x":-880,"y":-303,"width":304,"height":112},
		{"type":"text","text":"Sorting Techniques","id":"dd2118b7e8a036cf","x":-460,"y":-277,"width":250,"height":60},
		{"type":"text","text":"**[[merge_sort]]**\nmerge the array in halves and then recursively sort those array and then finally merge","id":"44c4d58f80bc7ac0","x":-100,"y":-556,"width":304,"height":112},
		{"type":"text","text":"**[[quick_sort]]**\nChoose a pivot element and then move the pivot element to its correct position. Recur sort two subparts","id":"bfefb0c182cd01ce","x":-487,"y":-556,"width":304,"height":112},
		{"type":"text","text":"**[[dual_pivot_quick_sort]]**\nChoose two pivot. Divide array in three parts. `< piv1 , >piv1 <piv2, >piv2` recursively sort the three","id":"d47b931008317fc2","x":-487,"y":-780,"width":304,"height":112},
		{"type":"text","text":"**[[tim_sort]]**\nDivide the array into k parts. Sort each part by insertion sort and then merge the subparts","id":"e894fe8666213f9a","x":-100,"y":-780,"width":304,"height":112},
		{"type":"text","text":"**[[insertion_sort]]**\nYou take the first element of the unsorted part and perform swap to get it to its correct position","id":"daf1e26b41411fac","x":-880,"y":-700,"width":304,"height":112},
		{"type":"text","text":"**[[shell_sort]]**\nInstead of comparing adjacent element you compare element at gap and decrease gap","id":"51b386abd3970030","x":-1280,"y":-700,"width":304,"height":112},
		{"type":"text","text":"**[[counting_sort]]**\nCreate a frequency map of the elements of the array and then add them. Look at the implementation that use prefix sum of freq map","id":"8441c5c9a6ea242b","x":-880,"y":-142,"width":304,"height":112},
		{"type":"text","text":"**[[radix_sort]]**\nIf the freq is too big first count sort based on lsb and then slowly increase the bit","id":"39ad1895f6f19d91","x":-1280,"y":-142,"width":304,"height":112},
		{"type":"text","text":"**[[bucket_sort]]**\nCreate buckets and then sort the individual buckets and then join them.","id":"d2428ae17621f9ae","x":-514,"y":-142,"width":304,"height":112},
		{"type":"text","text":"Sliding Window","id":"75e8d92f21e4aaee","x":-454,"y":192,"width":250,"height":60},
		{"type":"text","text":"Window of fixed length and you find value of a variable like mean, median mode.\nUse a DS to keep track it can be as easy as integer and as complicated as Deque","id":"be9d1d9150b2d0be","x":-800,"y":192,"width":252,"height":207},
		{"type":"text","text":"**Find Max in a window**\nYou use monotonic queue for this","id":"af3a42fed29ad64d","x":-1226,"y":266,"width":250,"height":99},
		{"type":"text","text":"Expand and contract window given the condition","id":"6d90e513b77613f1","x":-508,"y":365,"width":250,"height":60},
		{"type":"file","file":"src/software_engineering/dsa/array/housing.md","id":"b5c0fc239e37c215","x":-920,"y":460,"width":356,"height":175},
		{"type":"text","text":"**Array**","id":"3c89734a71e3a822","x":154,"y":-60,"width":100,"height":60,"color":"2"},
		{"type":"text","text":"**Standard Que**\nYou basically will have to learn the way these questions are solved","id":"4f3249a77f9e034e","x":608,"y":365,"width":352,"height":108},
		{"type":"text","text":"[[jump_game_2]]\nMaximum place you can go with the ith jump","id":"a3090ffa0001944b","x":784,"y":-860,"width":240,"height":80},
		{"type":"text","text":"[[max_length_of_pair_chain]]\nMinimum dist for current length","id":"ae78b277562b1ecb","x":1080,"y":-1000,"width":240,"height":80},
		{"type":"text","text":"[[longest_substring_without_repeat]]\nKeep track of the last time you saw this index","id":"0728048a4f58843e","x":240,"y":600,"width":260,"height":80},
		{"type":"text","text":"**Choose one as one of the index**\nIn this type of problem you generally need to find a set of elements. you assume that set ends here or if current is part of subset","id":"75235406af3657b9","x":608,"y":-720,"width":352,"height":108},
		{"type":"text","text":"**Change when array is sorted**\nFind change when array become sorted. For this track location change when the array gets sorted","id":"79a338f078841f52","x":608,"y":-548,"width":352,"height":108},
		{"type":"text","text":"**Subarray based problems**\nThey generally involve storing the prefix sum in a map","id":"a6df3e7f7dcfe11d","x":608,"y":134,"width":352,"height":108},
		{"type":"text","text":"[[merge_without_space]]\nUses derivation of [[shell_sort]] to swap and merge","id":"12f6a22d425e9c79","x":-1280,"y":-524,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[quick_select]]\nMove pivot to its correct place then decide if to move to left or right","id":"25599f1e3b3e606e","x":-280,"y":-648,"width":250,"height":60},
		{"type":"text","text":"[[unique_pair_with_difference_k]]\nFind arr[i] - target and arr[i] + target","id":"ae3b975791d2314f","x":1380,"y":-820,"width":240,"height":80},
		{"type":"text","text":"[[min_swaps]]\nTrack index for sorted to unsorted they form a circle","id":"65116104316fdd55","x":1080,"y":-440,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[pair_sum_k]]\nChoose the last element as i and find first in 0..i","id":"0be10b763beb11c7","x":1080,"y":-840,"width":240,"height":80},
		{"type":"text","text":"[[subarray_sort]]\nFind min and max out of order and then move them to their correct loc","id":"803f0fb78fe31cea","x":1080,"y":-534,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[triplet_sum_k]]\nChoose the last element as i and find two sum in 0..i","id":"c966709ed90c12e8","x":1080,"y":-740,"width":240,"height":80},
		{"type":"text","text":"[[maximum_sum_triplet]]\nAssume current element is you middle one then use suffix max for right and just less the curr in left (use set)","id":"5d300522f2b10499","x":1080,"y":-628,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"**Bucketing**\nYou create bucket for possible solutions and the use it to solve your problem.","id":"b2e9746c79a13d2e","x":608,"y":-138,"width":352,"height":108},
		{"type":"text","text":"[[trapping_rainwater]]\nYou store the prefix max and min","id":"55244a67b991f546","x":1080,"y":54,"width":240,"height":80},
		{"type":"text","text":"[[subarray_sum_divisible_by_k]]\nKeep track of the mod of prefix sum of mod is 0 when the value is same","id":"cab22c9bf470d163","x":1080,"y":148,"width":240,"height":80},
		{"type":"text","text":"[[2d_prefix_sum]]\nFirst find sum from left to right then top to bottom","id":"fb9d5cdd9637bef8","x":1080,"y":242,"width":240,"height":80},
		{"type":"text","text":"[[moore_voting]]\nYou keep track of the freq of the one that can be maximum. Solve general n//k","id":"7a5371f48df2dfd8","x":1080,"y":339,"width":240,"height":80},
		{"type":"text","text":"[[next_permutation]]\nIterate from back find the first i such that arr[i] < arr[i-1]. Swap it with the one just greater then it and then reverse","id":"4ad6128c0a5b52ca","x":1080,"y":433,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[maximum_product_subarray]]\nKeep track of max and min till now. (min can be max if it is -ve and multiplied with another -ve)","id":"000383b7d502bc7e","x":1080,"y":540,"width":240,"height":80},
		{"type":"text","text":"[[find_duplicate]]\nThe idea is to use array as hash map","id":"000e6c11fb8ad18f","x":540,"y":600,"width":260,"height":80},
		{"type":"text","text":"[[rotate_image]]\nThe idea is to first see how the outermost changes and then extend it to smaller one","id":"ecbb71f4468d0b66","x":820,"y":600,"width":240,"height":80},
		{"type":"text","text":"[[first_missing_positive]]\nStore the number < n","id":"1e920c839fe1b312","x":540,"y":740,"width":260,"height":60},
		{"type":"text","text":"**counting peaks and valley**\nYou do not count when array is monotonic. Check [[wiggle_subsequence]]","id":"cc1bda4a47df3a0f","x":608,"y":-286,"width":352,"height":108},
		{"type":"text","text":"[[maximum_consecutive_gap]]\nCreate a bucket with the minimum possible gap","id":"4daf4fec18b9306b","x":1080,"y":-40,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[triplet_sum_between_given_range]]\nCreate 3 buckets and see how you can form sum from element with these","id":"e7f4e3aa3d6a5650","x":1080,"y":-138,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[wiggle_subsequence]]\nCount number of peak and trough","id":"5f7d6858343872a7","x":1080,"y":-232,"width":240,"height":80,"color":"1"},
		{"type":"text","text":"[[max_distance]]\nArgsort the array and then keep track of min index to left","id":"bfe277644591b739","x":1080,"y":-340,"width":240,"height":80},
		{"type":"text","text":"[[inversion_count]]\nCount inversion while merging","id":"05ae50150d37119e","x":84,"y":-388,"width":240,"height":80,"color":"1"}
	],
	"edges":[
		{"id":"086c830fd52a7099","fromNode":"3c89734a71e3a822","fromSide":"left","toNode":"dd2118b7e8a036cf","toSide":"right"},
		{"id":"e0da26bbb1e4e451","fromNode":"dd2118b7e8a036cf","fromSide":"left","toNode":"02c0797c71873c0d","toSide":"right"},
		{"id":"357d1c035c0eefa2","fromNode":"dd2118b7e8a036cf","fromSide":"left","toNode":"d1ebb51132a24db0","toSide":"right"},
		{"id":"bb9c6c7453ec8f91","fromNode":"dd2118b7e8a036cf","fromSide":"left","toNode":"daf1e26b41411fac","toSide":"right"},
		{"id":"b73f75534ce2cb3d","fromNode":"daf1e26b41411fac","fromSide":"left","toNode":"51b386abd3970030","toSide":"right"},
		{"id":"a1cabb567057c28c","fromNode":"dd2118b7e8a036cf","fromSide":"top","toNode":"44c4d58f80bc7ac0","toSide":"bottom"},
		{"id":"2deb07a18338a2fc","fromNode":"dd2118b7e8a036cf","fromSide":"top","toNode":"bfefb0c182cd01ce","toSide":"bottom"},
		{"id":"b4f1366584f0e750","fromNode":"bfefb0c182cd01ce","fromSide":"top","toNode":"d47b931008317fc2","toSide":"bottom"},
		{"id":"d14275bc4ea4e42c","fromNode":"44c4d58f80bc7ac0","fromSide":"top","toNode":"e894fe8666213f9a","toSide":"bottom"},
		{"id":"ca81b75e78577d09","fromNode":"8441c5c9a6ea242b","fromSide":"left","toNode":"39ad1895f6f19d91","toSide":"right"},
		{"id":"16694fc2ac9ad28d","fromNode":"dd2118b7e8a036cf","fromSide":"left","toNode":"8441c5c9a6ea242b","toSide":"right"},
		{"id":"3928ede1688255cc","fromNode":"dd2118b7e8a036cf","fromSide":"bottom","toNode":"d2428ae17621f9ae","toSide":"top"},
		{"id":"7f965049ec554b5e","fromNode":"3c89734a71e3a822","fromSide":"left","toNode":"75e8d92f21e4aaee","toSide":"right"},
		{"id":"1718252f948ab2f8","fromNode":"75e8d92f21e4aaee","fromSide":"left","toNode":"be9d1d9150b2d0be","toSide":"right"},
		{"id":"f5b68e7c930b0fca","fromNode":"be9d1d9150b2d0be","fromSide":"left","toNode":"af3a42fed29ad64d","toSide":"right"},
		{"id":"09b6e2763ac2436e","fromNode":"75e8d92f21e4aaee","fromSide":"bottom","toNode":"6d90e513b77613f1","toSide":"top"},
		{"id":"712f27568a341b18","fromNode":"6d90e513b77613f1","fromSide":"left","toNode":"b5c0fc239e37c215","toSide":"right"},
		{"id":"2e04dc8e07063e15","fromNode":"3c89734a71e3a822","fromSide":"right","toNode":"75235406af3657b9","toSide":"left"},
		{"id":"5f88cd89028ab88f","fromNode":"75235406af3657b9","fromSide":"right","toNode":"0be10b763beb11c7","toSide":"left"},
		{"id":"ab05b3fc9c07a160","fromNode":"75235406af3657b9","fromSide":"right","toNode":"c966709ed90c12e8","toSide":"left"},
		{"id":"13b941a8e0902d2c","fromNode":"3c89734a71e3a822","fromSide":"right","toNode":"79a338f078841f52","toSide":"left"},
		{"id":"deac78623a007ec7","fromNode":"79a338f078841f52","fromSide":"right","toNode":"803f0fb78fe31cea","toSide":"left"},
		{"id":"95e4e3f5c2070dd0","fromNode":"79a338f078841f52","fromSide":"right","toNode":"65116104316fdd55","toSide":"left"},
		{"id":"ca2bfc4e92a5b6c9","fromNode":"4f3249a77f9e034e","fromSide":"right","toNode":"7a5371f48df2dfd8","toSide":"left"},
		{"id":"7f4252c14e669db7","fromNode":"4f3249a77f9e034e","fromSide":"right","toNode":"4ad6128c0a5b52ca","toSide":"left"},
		{"id":"5d07216675b61579","fromNode":"4f3249a77f9e034e","fromSide":"bottom","toNode":"ecbb71f4468d0b66","toSide":"top"},
		{"id":"2fbe69df8961aab7","fromNode":"4f3249a77f9e034e","fromSide":"bottom","toNode":"000e6c11fb8ad18f","toSide":"top"},
		{"id":"f344a84f0b3d2db2","fromNode":"75235406af3657b9","fromSide":"top","toNode":"a3090ffa0001944b","toSide":"bottom"},
		{"id":"cccce66b492265df","fromNode":"0be10b763beb11c7","fromSide":"right","toNode":"ae3b975791d2314f","toSide":"left"},
		{"id":"e0fcfccfb6545703","fromNode":"cc1bda4a47df3a0f","fromSide":"right","toNode":"5f7d6858343872a7","toSide":"left"},
		{"id":"7bf6b4dd1d9c0375","fromNode":"a3090ffa0001944b","fromSide":"right","toNode":"ae78b277562b1ecb","toSide":"left"},
		{"id":"c1387e84d1963439","fromNode":"3c89734a71e3a822","fromSide":"right","toNode":"cc1bda4a47df3a0f","toSide":"left"},
		{"id":"313cde93fa9929a0","fromNode":"a6df3e7f7dcfe11d","fromSide":"right","toNode":"cab22c9bf470d163","toSide":"left"},
		{"id":"611789a42992206a","fromNode":"000e6c11fb8ad18f","fromSide":"bottom","toNode":"1e920c839fe1b312","toSide":"top"},
		{"id":"5fb47e2f82daf9f6","fromNode":"4f3249a77f9e034e","fromSide":"right","toNode":"000383b7d502bc7e","toSide":"left"},
		{"id":"d1df832514744d61","fromNode":"3c89734a71e3a822","fromSide":"right","toNode":"a6df3e7f7dcfe11d","toSide":"left"},
		{"id":"563b421f1a5951a1","fromNode":"3c89734a71e3a822","fromSide":"right","toNode":"4f3249a77f9e034e","toSide":"left"},
		{"id":"4f1d39088247c7f6","fromNode":"a6df3e7f7dcfe11d","fromSide":"right","toNode":"fb9d5cdd9637bef8","toSide":"left"},
		{"id":"f6d334fb4b0b74d7","fromNode":"4f3249a77f9e034e","fromSide":"bottom","toNode":"0728048a4f58843e","toSide":"top"},
		{"id":"d3e83cc85c7a5456","fromNode":"a6df3e7f7dcfe11d","fromSide":"right","toNode":"55244a67b991f546","toSide":"left"},
		{"id":"56cc9882ac99f74d","fromNode":"51b386abd3970030","fromSide":"bottom","toNode":"12f6a22d425e9c79","toSide":"top"},
		{"id":"459c605e98d82a74","fromNode":"bfefb0c182cd01ce","fromSide":"right","toNode":"25599f1e3b3e606e","toSide":"bottom"},
		{"id":"90ef4be44f2fe853","fromNode":"75235406af3657b9","fromSide":"right","toNode":"5d300522f2b10499","toSide":"left"},
		{"id":"2be9ac8aed583f5e","fromNode":"3c89734a71e3a822","fromSide":"right","toNode":"b2e9746c79a13d2e","toSide":"left"},
		{"id":"67214384554c8c83","fromNode":"b2e9746c79a13d2e","fromSide":"right","toNode":"e7f4e3aa3d6a5650","toSide":"left"},
		{"id":"cf21e17246ceb2fa","fromNode":"b2e9746c79a13d2e","fromSide":"right","toNode":"4daf4fec18b9306b","toSide":"left"},
		{"id":"246eb28272c6d7f0","fromNode":"79a338f078841f52","fromSide":"right","toNode":"bfe277644591b739","toSide":"left"},
		{"id":"474f3649013c4f03","fromNode":"44c4d58f80bc7ac0","fromSide":"right","toNode":"05ae50150d37119e","toSide":"top"}
	]
}