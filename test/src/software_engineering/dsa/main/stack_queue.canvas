{
	"nodes":[
		{"type":"text","text":"**Stack & Queue**","id":"898b60e564ac2f8a","x":-80,"y":-60,"width":180,"height":60,"color":"3"},
		{"type":"text","text":"**Building The DS**","id":"c016d845b7ae3fe0","x":-169,"y":-189,"width":209,"height":69},
		{"type":"text","text":"[[stack_from_queue]]","id":"83b41f70f6da1ac0","x":-344,"y":-325,"width":204,"height":65,"color":"1"},
		{"type":"text","text":"[[queue_from_stack]]","id":"9a75e6e8656f2684","x":-20,"y":-325,"width":204,"height":65,"color":"1"},
		{"type":"text","text":"**Evaluate Notation**","id":"e026c39734d5ccc7","x":-20,"y":60,"width":209,"height":69},
		{"type":"text","text":"[[prefix_expression]]","id":"11dd4a7da1afcfcc","x":-20,"y":213,"width":204,"height":65},
		{"type":"text","text":"[[infix_expression]]","id":"fee79ee74a8d118b","x":-284,"y":213,"width":204,"height":65},
		{"type":"text","text":"[[postfix_expression]]","id":"d7102df5df8b3464","x":240,"y":213,"width":204,"height":65},
		{"type":"text","text":"[[monotonic_stack]]\nPop until greater or lesser","id":"9eeaed07abf8fe9c","x":-440,"y":-41,"width":233,"height":82},
		{"type":"text","text":"**Find largest or smallest k**\nGiven an array choose k element such that they are max or min","id":"b4c8dfff0512c5ae","x":-740,"y":-189,"width":270,"height":82},
		{"type":"text","text":"**Current as the answer**\nFind answer for all i with i as one of the params like height","id":"4469235f7a57e669","x":-740,"y":60,"width":270,"height":82},
		{"type":"text","text":"[[sum_of_subarray_minimum]]\nUse current to find the number of subarray where current is min","id":"c814a971b297289f","x":-620,"y":213,"width":276,"height":65},
		{"type":"text","text":"[[largest_rectangle_histogram]]\nYou can use the current bar as the height of the rectangle","id":"0f77754b1ea58e6b","x":-960,"y":213,"width":280,"height":65,"color":"1"},
		{"type":"text","text":"**Standard Que**\nYou use stack normally","id":"1702d3f2ee4fea7c","x":240,"y":-71,"width":233,"height":82},
		{"type":"text","text":"[[maximum_rectangle_area]]\nLooks like dp but just use the current row to build histogram","id":"3296147f7da0bf13","x":-1060,"y":69,"width":280,"height":65,"color":"1"},
		{"type":"text","text":"[[redundant_parenthesis]]\nPut the operator and open bracket in stack. Assert top is oper when encountering (","id":"e2864a45fed4cf22","x":220,"y":-254,"width":253,"height":100},
		{"type":"text","text":"[[longest_valid_parenthesis]]\nPut the index of the bracket that is casing the invalid in stack.","id":"a28bad6f00f6eab5","x":540,"y":-248,"width":260,"height":94,"color":"1"},
		{"type":"text","text":"[[basic_calculator_ii]]\nSince `*/` has more precedence put that operator applied to top in stack. For - put -x in stack and end add all elements","id":"7cd421e35fd181c5","x":547,"y":-60,"width":253,"height":100},
		{"type":"text","text":"[[basic_calculator]]\nEasier to do with recursion to solve `()`","id":"0460879f5e4699b1","x":547,"y":79,"width":253,"height":100,"color":"1"},
		{"id":"025102b9f77ad4f5","x":-1060,"y":-325,"width":282,"height":105,"color":"1","type":"text","text":"[[most_competative_subsequence]]\nThe idea is to keep the max possible in stack. You just check if the array has enough element to get k "},
		{"type":"text","text":"[[create_maximum_number]]\nAssume you are taking 0..k from first and rest from second. You can do something like [[most_competative_subsequence]] to get that. Then just merge the two array and find max","id":"ca424a7fcd04b66d","x":-1062,"y":-94,"width":282,"height":105,"color":"1"}
	],
	"edges":[
		{"id":"2afdcf33dfd545f6","fromNode":"898b60e564ac2f8a","fromSide":"top","toNode":"c016d845b7ae3fe0","toSide":"bottom"},
		{"id":"f8045e55cd20de09","fromNode":"c016d845b7ae3fe0","fromSide":"top","toNode":"83b41f70f6da1ac0","toSide":"bottom"},
		{"id":"fcf830212d634f2a","fromNode":"c016d845b7ae3fe0","fromSide":"top","toNode":"9a75e6e8656f2684","toSide":"bottom"},
		{"id":"24cac72b1b57636d","fromNode":"898b60e564ac2f8a","fromSide":"bottom","toNode":"e026c39734d5ccc7","toSide":"top"},
		{"id":"1339025058997fc7","fromNode":"e026c39734d5ccc7","fromSide":"bottom","toNode":"fee79ee74a8d118b","toSide":"top"},
		{"id":"b2bcceba0bda6378","fromNode":"e026c39734d5ccc7","fromSide":"bottom","toNode":"11dd4a7da1afcfcc","toSide":"top"},
		{"id":"ddb50b744dc86597","fromNode":"e026c39734d5ccc7","fromSide":"bottom","toNode":"d7102df5df8b3464","toSide":"top"},
		{"id":"9d344b599edfa252","fromNode":"898b60e564ac2f8a","fromSide":"left","toNode":"9eeaed07abf8fe9c","toSide":"right"},
		{"id":"aa05b58d16ded08c","fromNode":"9eeaed07abf8fe9c","fromSide":"left","toNode":"b4c8dfff0512c5ae","toSide":"right"},
		{"id":"d92ee1cc7340270a","fromNode":"9eeaed07abf8fe9c","fromSide":"left","toNode":"4469235f7a57e669","toSide":"right"},
		{"id":"4f6663f6857d08f9","fromNode":"4469235f7a57e669","fromSide":"bottom","toNode":"c814a971b297289f","toSide":"top"},
		{"id":"3c120a3fb28416a0","fromNode":"4469235f7a57e669","fromSide":"bottom","toNode":"0f77754b1ea58e6b","toSide":"top"},
		{"id":"bf3c66b694f69063","fromNode":"4469235f7a57e669","fromSide":"left","toNode":"3296147f7da0bf13","toSide":"right"},
		{"id":"c313d32ec8ccf071","fromNode":"0f77754b1ea58e6b","fromSide":"left","toNode":"3296147f7da0bf13","toSide":"bottom"},
		{"id":"6fbf387412b2ff56","fromNode":"898b60e564ac2f8a","fromSide":"right","toNode":"1702d3f2ee4fea7c","toSide":"left"},
		{"id":"84fa1e1c81997edd","fromNode":"1702d3f2ee4fea7c","fromSide":"top","toNode":"e2864a45fed4cf22","toSide":"bottom"},
		{"id":"e7178b9cdee553ab","fromNode":"1702d3f2ee4fea7c","fromSide":"right","toNode":"a28bad6f00f6eab5","toSide":"left"},
		{"id":"aadd0f133267591e","fromNode":"1702d3f2ee4fea7c","fromSide":"right","toNode":"7cd421e35fd181c5","toSide":"left"},
		{"id":"1e0b695961ee4d26","fromNode":"1702d3f2ee4fea7c","fromSide":"right","toNode":"0460879f5e4699b1","toSide":"left"},
		{"id":"9f624a3026c4d752","fromNode":"b4c8dfff0512c5ae","fromSide":"left","toNode":"025102b9f77ad4f5","toSide":"right"},
		{"id":"03b7d3dfb11cbb75","fromNode":"b4c8dfff0512c5ae","fromSide":"left","toNode":"ca424a7fcd04b66d","toSide":"right"}
	]
}