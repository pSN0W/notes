{
	"nodes":[
		{"type":"text","text":"**Tree**","id":"7e6776d0398ff4ce","x":-240,"y":-60,"width":100,"height":60,"color":"3"},
		{"id":"10053d37b4740aa2","x":-614,"y":-280,"width":143,"height":60,"type":"text","text":"**Traversals**"},
		{"id":"68e3f7ef203055ca","x":-1180,"y":-480,"width":252,"height":104,"color":"1","type":"text","text":"[[inorder_traversal]]\nPut all left in stack then pop put in list go right and put all left in stack"},
		{"type":"text","text":"[[preorder_traversal]]\nPut curr val in answer put all left in stack with putting answer pop go right","id":"74d3ced9172bd2bb","x":-900,"y":-480,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"[[postorder_traversal]]\nThink in term of reverse. This is something like level order but you go right first and use stack instead of queue","id":"6c7b33a9d5a29d48","x":-614,"y":-480,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"[[level_order_traversal]]\nUse a queue and traverse it level wise","id":"25984e5d465f3fd0","x":-340,"y":-480,"width":252,"height":104},
		{"type":"text","text":"[[vertical_order_traversal]]\nAssume root it as 0 and then left will be -1 and right +1 put in map and print accordingly. Perform level order for sorted","id":"6120a6264a19cec8","x":-240,"y":-640,"width":252,"height":104},
		{"type":"text","text":"[[diagonal_order_traversal]]\nHere you want to keep track of slope if you go left then slope is same but while going right slope increases by 1. For a specific slope all the left will be on same diagnol","id":"18576e3c50e19130","x":-520,"y":-640,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"[[boundary_traversal]]\nCreate left boundary and then add leaves and the add right bundary","id":"bb1832c1db66fd80","x":-980,"y":-302,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"[[morris_traversal]]\nThe idea is to thread the binary tree. Before going to left create a thread from rightmost of left to current","id":"5c6e02d54e61b09a","x":-394,"y":-280,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"[[preorder_inorder_postorder_in_one_traversal]]\nYou push a num with it too","id":"1cf99850943f3388","x":-900,"y":-640,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"**Construction**","id":"a985765f92425015","x":180,"y":-280,"width":160,"height":52},
		{"type":"text","text":"[[from_inorder_and_preorder]]\nUse inorder to get root and then find root in preorder left to that will belong to left and right to right","id":"13d113b21a93fe2e","x":-40,"y":-480,"width":252,"height":104},
		{"type":"text","text":"[[from_postorder_and_inorder]]\nUse post order to get the root","id":"3fa6a7e681891b3b","x":240,"y":-480,"width":252,"height":104},
		{"type":"text","text":"[[construct_bst_from_preorder]]\nYou can use upperbound concept","id":"3bf82aa2f1bdb7f3","x":520,"y":-480,"width":252,"height":104,"color":"1"},
		{"type":"text","text":"**Views of tree**","id":"2364b30497991d7e","x":-698,"y":-90,"width":227,"height":60},
		{"id":"63ce1ffea2d85b9c","x":-1015,"y":14,"width":250,"height":106,"type":"text","text":"[[top_view_of_tree]]\nVertical order traversal but don't go to same dist twice"},
		{"id":"82eeccaf5df5d5ce","x":-1015,"y":-76,"width":250,"height":76,"type":"text","text":"[[bottom_view_of_tree]]\nSame as top view but here you will update the map"},
		{"id":"04a3280ff34e478d","x":-1013,"y":-161,"width":250,"height":71,"color":"1","type":"text","text":"[[right_view_of_tree]]\nMaintain a level. If you reach level for first time then put in ds"},
		{"type":"text","text":"**Binary Search Tree**\nleft < node < right","id":"bf0d7897ecd71e5c","x":-160,"y":200,"width":227,"height":60},
		{"type":"text","text":"**Binary Lifting**\nKeep the 2^i parent","id":"63b31b1712618428","x":-698,"y":200,"width":227,"height":60},
		{"id":"dc761dc0b83213dc","x":-1013,"y":140,"width":250,"height":60,"color":"1","type":"text","text":"[[kth_ancestor]]\nTypical binary lifting"},
		{"type":"text","text":"[[lowest_common_ancestor]]\nlift to the same level using kth ancestor then lift max until the parent of both differ.","id":"edf590bc34068466","x":-1013,"y":230,"width":250,"height":150,"color":"1"},
		{"id":"bfe0c3949d7c25cc","x":-520,"y":350,"width":250,"height":60,"type":"text","text":"[[equal_ceil_floor_in_bst]]\nGo left or right depending the comparision"},
		{"type":"text","text":"[[insert_a_node_in_bst]]\nGo the place where that node shoul have been and add there","id":"11519babe79b8cf1","x":-240,"y":350,"width":250,"height":60},
		{"type":"text","text":"[[delete_a_node_in_bst]]\nFind that node attach its node to left and right to rightmost of left","id":"4441725e581f86c3","x":20,"y":350,"width":250,"height":110,"color":"1"},
		{"type":"text","text":"[[validate_bst]]\nKeep upper bound and lower bound for each of the node and then ensure there child lie in that","id":"ea9f23d08144ba44","x":300,"y":350,"width":250,"height":110,"color":"1"},
		{"id":"111eb0e5961d5e96","x":145,"y":40,"width":250,"height":94,"color":"1","type":"text","text":"[[lca_in_bst]]\nChoose whether to go left or right if one is left and another in right then this is LCA"},
		{"id":"6c971bf0301748e0","x":149,"y":175,"width":276,"height":105,"type":"text","text":"[[inorder_successor_of_bst]]\nWhile searching for that node keep track of all node greater then it"},
		{"id":"caa1be842e3b041d","x":-339,"y":134,"width":179,"height":60,"type":"text","text":"[[bst_iterator]]\nInorder traversal"},
		{"id":"ca127991e665967f","x":157,"y":-90,"width":250,"height":60,"type":"text","text":"**Standard Question**"},
		{"id":"9b046945a4f1ebf8","x":488,"y":-299,"width":250,"height":60,"type":"text","text":"[[diameter_of_binary_tree]]\nKeep a global var and return height"},
		{"id":"dc2068b1b943293b","x":492,"y":-228,"width":250,"height":60,"color":"1","type":"text","text":"[[subtree_of_another_tree]]\nSerialize and string matchi"},
		{"id":"1e72a4978ee49310","x":493,"y":-150,"width":250,"height":60,"type":"text","text":"[[symmetric_tree]]\nCompare left with rightmost"},
		{"id":"18b227147bb5e668","x":-188,"y":472,"width":250,"height":60,"type":"text","text":"[[sorted_array_to_bst]]\nChoose the middle as root"},
		{"id":"30220136e2d9a256","x":297,"y":488,"width":303,"height":92,"type":"text","text":"[[minimum_absolute_difference_in_bst]]\nReturn min and max of subtree"},
		{"id":"95f950161fb39a77","x":493,"y":-60,"width":250,"height":60,"type":"text","text":"[[height_balanced_tree]]\nDifference between h < 1"},
		{"id":"cdb9e143f9749de3","x":492,"y":7,"width":250,"height":116,"type":"text","text":"[[nodes_at_distance_k]]\nKeep track of parent and from node go left right and parent"},
		{"id":"4eb87b42167804dd","x":491,"y":138,"width":252,"height":122,"color":"1","type":"text","text":"[[path_sum_iii]]\nYou can think each of the branch as an array keep track of prefix sum"},
		{"id":"c68df40df4aa93ca","x":812,"y":-304,"width":250,"height":76,"color":"1","type":"text","text":"[[flatten_binary_tree]]\nThink of different cases"},
		{"type":"text","text":"[[max_width_of_bt]]\nGive each node a number","id":"dbfdf48574424cbc","x":812,"y":-188,"width":250,"height":76,"color":"1"},
		{"type":"text","text":"[[unique_bst_ii]]\nKeep track of shit look at code","id":"531ad5ad60dd64a7","x":812,"y":-76,"width":250,"height":76,"color":"1"},
		{"type":"text","text":"[[binary_tree_cameras]]\nBest to put camera on node just above leave","id":"c04072788195174d","x":812,"y":27,"width":250,"height":76,"color":"1"},
		{"type":"text","text":"[[children_sum_binary_tree]]\nEnsure that sum of child are greater then root of not copy root to both the tree","id":"b2633676d141abad","x":812,"y":124,"width":250,"height":76,"color":"1"},
		{"type":"text","text":"[[count_complete_tree_node]]\nIf it is height balanced the don't need traverse it will be 2^i - 1. To check complete lft_ht == rt_tree","id":"549aa0f7d57aa33f","x":812,"y":228,"width":250,"height":76,"color":"1"},
		{"id":"03d551b930d4ec00","x":-500,"y":475,"width":250,"height":60,"color":"1","type":"text","text":"[[two_sum_bst]]\nWatch Striver"}
	],
	"edges":[
		{"id":"094f27c7e45f9b68","fromNode":"7e6776d0398ff4ce","fromSide":"top","toNode":"10053d37b4740aa2","toSide":"bottom"},
		{"id":"b6c4991bcad3253e","fromNode":"10053d37b4740aa2","fromSide":"top","toNode":"68e3f7ef203055ca","toSide":"bottom"},
		{"id":"710fc0d9feaec23a","fromNode":"10053d37b4740aa2","fromSide":"top","toNode":"74d3ced9172bd2bb","toSide":"bottom"},
		{"id":"b7690c88d67b47ee","fromNode":"10053d37b4740aa2","fromSide":"top","toNode":"6c7b33a9d5a29d48","toSide":"bottom"},
		{"id":"cc90afdc99eba41b","fromNode":"10053d37b4740aa2","fromSide":"top","toNode":"25984e5d465f3fd0","toSide":"bottom"},
		{"id":"78de506c4c5704a3","fromNode":"25984e5d465f3fd0","fromSide":"top","toNode":"6120a6264a19cec8","toSide":"bottom"},
		{"id":"bd88466d90fc1f25","fromNode":"25984e5d465f3fd0","fromSide":"top","toNode":"18576e3c50e19130","toSide":"bottom"},
		{"id":"d6d3faa4665c632a","fromNode":"10053d37b4740aa2","fromSide":"left","toNode":"bb1832c1db66fd80","toSide":"right"},
		{"id":"5a170d521951f6bd","fromNode":"10053d37b4740aa2","fromSide":"right","toNode":"5c6e02d54e61b09a","toSide":"left"},
		{"id":"70e5b7dd36b5bc2b","fromNode":"68e3f7ef203055ca","fromSide":"top","toNode":"1cf99850943f3388","toSide":"bottom"},
		{"id":"96580010081c6ef2","fromNode":"74d3ced9172bd2bb","fromSide":"top","toNode":"1cf99850943f3388","toSide":"bottom"},
		{"id":"27a74ef5eb4ca823","fromNode":"6c7b33a9d5a29d48","fromSide":"top","toNode":"1cf99850943f3388","toSide":"bottom"},
		{"id":"ba050cb54f2db9f8","fromNode":"7e6776d0398ff4ce","fromSide":"top","toNode":"a985765f92425015","toSide":"bottom"},
		{"id":"3503c14d2562708c","fromNode":"a985765f92425015","fromSide":"top","toNode":"13d113b21a93fe2e","toSide":"bottom"},
		{"id":"f0f97c192060ff51","fromNode":"a985765f92425015","fromSide":"top","toNode":"3fa6a7e681891b3b","toSide":"bottom"},
		{"id":"f8d9e0d5d70e4482","fromNode":"a985765f92425015","fromSide":"top","toNode":"3bf82aa2f1bdb7f3","toSide":"bottom"},
		{"id":"d5ae5e69fca39632","fromNode":"7e6776d0398ff4ce","fromSide":"left","toNode":"2364b30497991d7e","toSide":"right"},
		{"id":"aacb06ca1927315c","fromNode":"2364b30497991d7e","fromSide":"left","toNode":"63ce1ffea2d85b9c","toSide":"right"},
		{"id":"b8e7ec1b96ed9dde","fromNode":"2364b30497991d7e","fromSide":"left","toNode":"82eeccaf5df5d5ce","toSide":"right"},
		{"id":"269298bec69c3a76","fromNode":"2364b30497991d7e","fromSide":"left","toNode":"04a3280ff34e478d","toSide":"right"},
		{"id":"25dbf75347760ff1","fromNode":"7e6776d0398ff4ce","fromSide":"left","toNode":"63b31b1712618428","toSide":"right"},
		{"id":"cf0c8e0e16724f27","fromNode":"63b31b1712618428","fromSide":"left","toNode":"dc761dc0b83213dc","toSide":"right"},
		{"id":"da30cc7b0d4fc17d","fromNode":"63b31b1712618428","fromSide":"left","toNode":"edf590bc34068466","toSide":"right"},
		{"id":"09d6f0924d714816","fromNode":"7e6776d0398ff4ce","fromSide":"bottom","toNode":"bf0d7897ecd71e5c","toSide":"top"},
		{"id":"66bee5e17695fc74","fromNode":"bf0d7897ecd71e5c","fromSide":"bottom","toNode":"bfe0c3949d7c25cc","toSide":"top"},
		{"id":"da6b103e310f130e","fromNode":"bf0d7897ecd71e5c","fromSide":"bottom","toNode":"11519babe79b8cf1","toSide":"top"},
		{"id":"6986ba93eb38e77d","fromNode":"bf0d7897ecd71e5c","fromSide":"bottom","toNode":"4441725e581f86c3","toSide":"top"},
		{"id":"476592d291b8cb8d","fromNode":"bf0d7897ecd71e5c","fromSide":"bottom","toNode":"ea9f23d08144ba44","toSide":"top"},
		{"id":"ed1933b249e677c6","fromNode":"bf0d7897ecd71e5c","fromSide":"right","toNode":"111eb0e5961d5e96","toSide":"left"},
		{"id":"7e2078bef959583b","fromNode":"bf0d7897ecd71e5c","fromSide":"right","toNode":"6c971bf0301748e0","toSide":"left"},
		{"id":"5494c9db049c8726","fromNode":"bf0d7897ecd71e5c","fromSide":"left","toNode":"caa1be842e3b041d","toSide":"right"},
		{"id":"56f0079af483c7ff","fromNode":"7e6776d0398ff4ce","fromSide":"right","toNode":"ca127991e665967f","toSide":"left"},
		{"id":"38242a0737d8cb4d","fromNode":"ca127991e665967f","fromSide":"right","toNode":"9b046945a4f1ebf8","toSide":"left"},
		{"id":"dd54458148432b14","fromNode":"ca127991e665967f","fromSide":"right","toNode":"dc2068b1b943293b","toSide":"left"},
		{"id":"632aeea9e64ca966","fromNode":"ca127991e665967f","fromSide":"right","toNode":"1e72a4978ee49310","toSide":"left"},
		{"id":"c55b1094c3ef356c","fromNode":"bf0d7897ecd71e5c","fromSide":"bottom","toNode":"18b227147bb5e668","toSide":"top"},
		{"id":"07db71f7bcc9ff27","fromNode":"ea9f23d08144ba44","fromSide":"bottom","toNode":"30220136e2d9a256","toSide":"top"},
		{"id":"70371e54bab26e6b","fromNode":"ca127991e665967f","fromSide":"right","toNode":"95f950161fb39a77","toSide":"left"},
		{"id":"878cbb5bb97e2071","fromNode":"ca127991e665967f","fromSide":"right","toNode":"cdb9e143f9749de3","toSide":"left"},
		{"id":"940b848f62a13133","fromNode":"ca127991e665967f","fromSide":"right","toNode":"4eb87b42167804dd","toSide":"left"},
		{"id":"f474f91ae0f11fca","fromNode":"ca127991e665967f","fromSide":"right","toNode":"c68df40df4aa93ca","toSide":"left"},
		{"id":"d35eb9e9b67da540","fromNode":"ca127991e665967f","fromSide":"right","toNode":"dbfdf48574424cbc","toSide":"left"},
		{"id":"37260ad92c85b0cb","fromNode":"ca127991e665967f","fromSide":"right","toNode":"531ad5ad60dd64a7","toSide":"left"},
		{"id":"e7f28ba26b0e9ff4","fromNode":"ca127991e665967f","fromSide":"right","toNode":"c04072788195174d","toSide":"left"},
		{"id":"3dc3d13ae2c81bc3","fromNode":"ca127991e665967f","fromSide":"right","toNode":"b2633676d141abad","toSide":"left"},
		{"id":"80911a23aff1d49f","fromNode":"ca127991e665967f","fromSide":"right","toNode":"549aa0f7d57aa33f","toSide":"left"},
		{"id":"e3b9c5449674aba3","fromNode":"bf0d7897ecd71e5c","fromSide":"bottom","toNode":"03d551b930d4ec00","toSide":"top"}
	]
}